[{"/home/labber/Dev/chemical-plant-dashboard/src/index.js":"1","/home/labber/Dev/chemical-plant-dashboard/src/reportWebVitals.js":"2","/home/labber/Dev/chemical-plant-dashboard/src/App.js":"3","/home/labber/Dev/chemical-plant-dashboard/src/components/index.jsx":"4","/home/labber/Dev/chemical-plant-dashboard/src/services/dummy.js":"5","/home/labber/Dev/chemical-plant-dashboard/src/services/time.js":"6","/home/labber/Dev/chemical-plant-dashboard/src/services/BarGraph/BarType.js":"7","/home/labber/Dev/chemical-plant-dashboard/src/components/bar.jsx":"8","/home/labber/Dev/chemical-plant-dashboard/src/components/line.jsx":"9","/home/labber/Dev/chemical-plant-dashboard/src/components/Bar.jsx":"10","/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx":"11","/home/labber/Dev/chemical-plant-dashboard/src/services/LineGraph/lineType.js":"12"},{"size":535,"mtime":1697517751765,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1697517751765,"results":"15","hashOfConfig":"14"},{"size":554,"mtime":1697522174903,"results":"16","hashOfConfig":"14"},{"size":2064,"mtime":1697530372031,"results":"17","hashOfConfig":"14"},{"size":3342,"mtime":1697530772471,"results":"18","hashOfConfig":"14"},{"size":458,"mtime":1697531062371,"results":"19","hashOfConfig":"14"},{"size":4152,"mtime":1697527637752,"results":"20","hashOfConfig":"14"},{"size":1356,"mtime":1697527637752,"results":"21","hashOfConfig":"14"},{"size":2132,"mtime":1697528153382,"results":"22","hashOfConfig":"14"},{"size":1356,"mtime":1697528171552,"results":"23","hashOfConfig":"14"},{"size":1385,"mtime":1697530220881,"results":"24","hashOfConfig":"14"},{"size":4714,"mtime":1697531002971,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1c4lcv7",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/home/labber/Dev/chemical-plant-dashboard/src/index.js",[],[],["68"],"/home/labber/Dev/chemical-plant-dashboard/src/reportWebVitals.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/src/App.js",["69"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Graph from \"./components/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to Chemical Dashboard</h1>\n        <Graph />\n{/*         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n */}        {/* <p>Lol</p>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        ></a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["70"],"/home/labber/Dev/chemical-plant-dashboard/src/components/index.jsx",["71","72","73","74","75","76","77","78","79","80","81","82","83"],[],"/home/labber/Dev/chemical-plant-dashboard/src/services/dummy.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/src/services/time.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/src/services/BarGraph/BarType.js",["84"],[],"/home/labber/Dev/chemical-plant-dashboard/src/components/bar.jsx",["85"],[],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\nimport { timestampToReadableDate } from \"../services/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettings(barType, dummyDatasets);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData({});\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [barType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Bar redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n",["86"],"/home/labber/Dev/chemical-plant-dashboard/src/components/line.jsx",["87","88","89","90"],[],"/home/labber/Dev/chemical-plant-dashboard/src/components/Bar.jsx",["91"],[],"/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx",["92","93","94"],[],"/home/labber/Dev/chemical-plant-dashboard/src/services/LineGraph/lineType.js",["95"],[],"import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettingsLine(type, plotData) {\r\n  console.log(plotData);\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Line Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"||\r\n            type === \"LevelCombined\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\" ||\r\n              type === \"LevelCombined\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n  if(type === \"Level\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level1_chemical;\r\n          }),\r\n        \r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level2_chemical;\r\n          }),\r\n        \r\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\",      },\r\n    ];\r\n  } else if(type === \"LevelCombined\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n            return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n          }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      \r\n    ];\r\n  }\r\n  else if (type === \"All\") {\r\n    datasets = [\r\n      {\r\n        label: \"Temperature\",\r\n        data: plotData.map((data2) => {\r\n          return data2.temperature\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Pressure\",\r\n        data: plotData.map((data2) => {\r\n          return data2.pressure\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(155, 20, 32, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical1 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(5, 120, 99, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical2 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 0, 200, 0.5\",\r\n      },\r\n      {\r\n        label: \"Combined Level\",\r\n        data: plotData.map((data2) => {\r\n          return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 29, 2, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n  else {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  \r\n  }\r\n   \r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":8,"nodeType":"100","messageId":"101","endLine":1,"endColumn":12},{"ruleId":"96","replacedBy":"102"},{"ruleId":"98","severity":1,"message":"103","line":2,"column":12,"nodeType":"100","messageId":"101","endLine":2,"endColumn":19},{"ruleId":"98","severity":1,"message":"104","line":3,"column":3,"nodeType":"100","messageId":"101","endLine":3,"endColumn":16},{"ruleId":"98","severity":1,"message":"105","line":4,"column":3,"nodeType":"100","messageId":"101","endLine":4,"endColumn":14},{"ruleId":"98","severity":1,"message":"106","line":5,"column":3,"nodeType":"100","messageId":"101","endLine":5,"endColumn":13},{"ruleId":"98","severity":1,"message":"107","line":6,"column":3,"nodeType":"100","messageId":"101","endLine":6,"endColumn":8},{"ruleId":"98","severity":1,"message":"108","line":7,"column":3,"nodeType":"100","messageId":"101","endLine":7,"endColumn":10},{"ruleId":"98","severity":1,"message":"109","line":8,"column":3,"nodeType":"100","messageId":"101","endLine":8,"endColumn":9},{"ruleId":"98","severity":1,"message":"110","line":9,"column":3,"nodeType":"100","messageId":"101","endLine":9,"endColumn":15},{"ruleId":"98","severity":1,"message":"111","line":10,"column":3,"nodeType":"100","messageId":"101","endLine":10,"endColumn":14},{"ruleId":"98","severity":1,"message":"112","line":12,"column":10,"nodeType":"100","messageId":"101","endLine":12,"endColumn":13},{"ruleId":"98","severity":1,"message":"113","line":12,"column":15,"nodeType":"100","messageId":"101","endLine":12,"endColumn":19},{"ruleId":"98","severity":1,"message":"114","line":13,"column":17,"nodeType":"100","messageId":"101","endLine":13,"endColumn":26},{"ruleId":"98","severity":1,"message":"115","line":13,"column":28,"nodeType":"100","messageId":"101","endLine":13,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":130,"column":36,"nodeType":"118","messageId":"119","endLine":130,"endColumn":38},{"ruleId":"98","severity":1,"message":"120","line":13,"column":10,"nodeType":"100","messageId":"101","endLine":13,"endColumn":33},{"ruleId":"96","replacedBy":"121"},{"ruleId":"98","severity":1,"message":"106","line":5,"column":3,"nodeType":"100","messageId":"101","endLine":5,"endColumn":13},{"ruleId":"98","severity":1,"message":"112","line":13,"column":10,"nodeType":"100","messageId":"101","endLine":13,"endColumn":13},{"ruleId":"98","severity":1,"message":"114","line":14,"column":17,"nodeType":"100","messageId":"101","endLine":14,"endColumn":26},{"ruleId":"98","severity":1,"message":"115","line":14,"column":28,"nodeType":"100","messageId":"101","endLine":14,"endColumn":34},{"ruleId":"98","severity":1,"message":"120","line":13,"column":10,"nodeType":"100","messageId":"101","endLine":13,"endColumn":33},{"ruleId":"98","severity":1,"message":"106","line":5,"column":3,"nodeType":"100","messageId":"101","endLine":5,"endColumn":13},{"ruleId":"98","severity":1,"message":"112","line":14,"column":10,"nodeType":"100","messageId":"101","endLine":14,"endColumn":13},{"ruleId":"98","severity":1,"message":"115","line":15,"column":28,"nodeType":"100","messageId":"101","endLine":15,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":154,"column":36,"nodeType":"118","messageId":"119","endLine":154,"endColumn":38},"no-new-object",["122"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["122"],"'ChartJS' is defined but never used.","'CategoryScale' is defined but never used.","'LinearScale' is defined but never used.","'BarElement' is defined but never used.","'Title' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'PointElement' is defined but never used.","'LineElement' is defined but never used.","'Bar' is defined but never used.","'Line' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'timestampToReadableDate' is defined but never used.",["122"],"no-object-constructor"]