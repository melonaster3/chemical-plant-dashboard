[{"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js":"1","/home/labber/Dev/chemical-plant-dashboard/client/src/App.js":"2","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js":"3","/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx":"4","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx":"5","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx":"6","/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js":"7","/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js":"8","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js":"9","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Time/time.js":"10","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/dummy.js":"11","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/types.js":"12"},{"size":535,"mtime":1697598036729,"results":"13","hashOfConfig":"14"},{"size":554,"mtime":1697598036729,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1697598036729,"results":"16","hashOfConfig":"14"},{"size":4837,"mtime":1697608257555,"results":"17","hashOfConfig":"14"},{"size":1464,"mtime":1697608297195,"results":"18","hashOfConfig":"14"},{"size":1531,"mtime":1697608303155,"results":"19","hashOfConfig":"14"},{"size":4766,"mtime":1697607012625,"results":"20","hashOfConfig":"14"},{"size":4719,"mtime":1697598274680,"results":"21","hashOfConfig":"14"},{"size":233,"mtime":1697598036729,"results":"22","hashOfConfig":"14"},{"size":3477,"mtime":1697598584780,"results":"23","hashOfConfig":"14"},{"size":2107,"mtime":1697598926799,"results":"24","hashOfConfig":"14"},{"size":1174,"mtime":1697604942786,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mwqiud",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/App.js",["64"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx",["65","66","67","68","69","70","71","72","73","74","75","76","77","78"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx",["79","80"],[],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/Data/dummy\";\r\nimport { getAverage, timestampToReadableDate } from \"../services/Time/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n  const timeFrame = props.timeFrame;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const dataAVG = getAverage(props.data, timeFrame);\r\n    const GraphSettings = GetGraphSettings(barType, dataAVG);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [barType, timeFrame, props.data]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Bar redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx",["81","82","83","84"],[],"import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\nimport { dummyDatasets } from \"../services/Data/dummy\";\r\n\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\r\nimport { getAverage } from \"../services/Time/time\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function LineGraph(props) {\r\n  const lineType = props.type;\r\n  const timeFrame = props.timeFrame;\r\n\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const dataAVG = getAverage(props.data, timeFrame);\r\n    const GraphSettings = GetGraphSettingsLine(lineType, dataAVG);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [lineType, timeFrame, props.data]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Line redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js",["85"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js",["86"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Time/time.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/dummy.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/types.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":12},{"ruleId":"87","severity":1,"message":"91","line":2,"column":12,"nodeType":"89","messageId":"90","endLine":2,"endColumn":19},{"ruleId":"87","severity":1,"message":"92","line":3,"column":3,"nodeType":"89","messageId":"90","endLine":3,"endColumn":16},{"ruleId":"87","severity":1,"message":"93","line":4,"column":3,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"94","line":5,"column":3,"nodeType":"89","messageId":"90","endLine":5,"endColumn":13},{"ruleId":"87","severity":1,"message":"95","line":6,"column":3,"nodeType":"89","messageId":"90","endLine":6,"endColumn":8},{"ruleId":"87","severity":1,"message":"96","line":7,"column":3,"nodeType":"89","messageId":"90","endLine":7,"endColumn":10},{"ruleId":"87","severity":1,"message":"97","line":8,"column":3,"nodeType":"89","messageId":"90","endLine":8,"endColumn":9},{"ruleId":"87","severity":1,"message":"98","line":9,"column":3,"nodeType":"89","messageId":"90","endLine":9,"endColumn":15},{"ruleId":"87","severity":1,"message":"99","line":10,"column":3,"nodeType":"89","messageId":"90","endLine":10,"endColumn":14},{"ruleId":"87","severity":1,"message":"100","line":12,"column":10,"nodeType":"89","messageId":"90","endLine":12,"endColumn":13},{"ruleId":"87","severity":1,"message":"101","line":12,"column":15,"nodeType":"89","messageId":"90","endLine":12,"endColumn":19},{"ruleId":"87","severity":1,"message":"102","line":13,"column":28,"nodeType":"89","messageId":"90","endLine":13,"endColumn":34},{"ruleId":"87","severity":1,"message":"103","line":31,"column":10,"nodeType":"89","messageId":"90","endLine":31,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":77,"column":6,"nodeType":"106","endLine":77,"endColumn":26,"suggestions":"107"},{"ruleId":"87","severity":1,"message":"108","line":12,"column":10,"nodeType":"89","messageId":"90","endLine":12,"endColumn":23},{"ruleId":"87","severity":1,"message":"109","line":13,"column":22,"nodeType":"89","messageId":"90","endLine":13,"endColumn":45},{"ruleId":"87","severity":1,"message":"94","line":5,"column":3,"nodeType":"89","messageId":"90","endLine":5,"endColumn":13},{"ruleId":"87","severity":1,"message":"108","line":12,"column":10,"nodeType":"89","messageId":"90","endLine":12,"endColumn":23},{"ruleId":"87","severity":1,"message":"100","line":14,"column":10,"nodeType":"89","messageId":"90","endLine":14,"endColumn":13},{"ruleId":"87","severity":1,"message":"102","line":15,"column":28,"nodeType":"89","messageId":"90","endLine":15,"endColumn":34},{"ruleId":"110","severity":1,"message":"111","line":156,"column":36,"nodeType":"112","messageId":"113","endLine":156,"endColumn":38},{"ruleId":"110","severity":1,"message":"111","line":154,"column":36,"nodeType":"112","messageId":"113","endLine":154,"endColumn":38},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ChartJS' is defined but never used.","'CategoryScale' is defined but never used.","'LinearScale' is defined but never used.","'BarElement' is defined but never used.","'Title' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'PointElement' is defined but never used.","'LineElement' is defined but never used.","'Bar' is defined but never used.","'Line' is defined but never used.","'useRef' is defined but never used.","'buttonPressed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fullData' and 'showingData'. Either include them or remove the dependency array.","ArrayExpression",["114"],"'dummyDatasets' is defined but never used.","'timestampToReadableDate' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"115","fix":"116"},"Update the dependencies array to be: [endTime, fullData, showingData, startTime]",{"range":"117","text":"118"},[2322,2342],"[endTime, fullData, showingData, startTime]"]