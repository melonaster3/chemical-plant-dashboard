[{"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js":"1","/home/labber/Dev/chemical-plant-dashboard/client/src/App.js":"2","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js":"3","/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx":"4","/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js":"5","/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js":"6","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js":"7","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Time/time.js":"8","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/dummy.js":"9","/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/types.js":"10","/home/labber/Dev/chemical-plant-dashboard/client/src/components/style/style.js":"11","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/index.jsx":"12","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/FetchAndReset/index.jsx":"13","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/Data/index.jsx":"14","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/Graph/index.jsx":"15","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/TimeWindow/index.jsx":"16","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/TimeAvg/index.jsx":"17","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Line.jsx":"18","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Graph.jsx":"19","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Bar.jsx":"20"},{"size":535,"mtime":1697598036729,"results":"21","hashOfConfig":"22"},{"size":2110,"mtime":1697635307818,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1697598036729,"results":"24","hashOfConfig":"22"},{"size":2525,"mtime":1697631643671,"results":"25","hashOfConfig":"22"},{"size":4766,"mtime":1697608690455,"results":"26","hashOfConfig":"22"},{"size":4719,"mtime":1697608690455,"results":"27","hashOfConfig":"22"},{"size":233,"mtime":1697598036729,"results":"28","hashOfConfig":"22"},{"size":3477,"mtime":1697608690455,"results":"29","hashOfConfig":"22"},{"size":2107,"mtime":1697608690455,"results":"30","hashOfConfig":"22"},{"size":1172,"mtime":1697612560843,"results":"31","hashOfConfig":"22"},{"size":2041,"mtime":1697635359948,"results":"32","hashOfConfig":"22"},{"size":992,"mtime":1697634861288,"results":"33","hashOfConfig":"22"},{"size":1041,"mtime":1697634871568,"results":"34","hashOfConfig":"22"},{"size":1430,"mtime":1697635201938,"results":"35","hashOfConfig":"22"},{"size":1319,"mtime":1697634881608,"results":"36","hashOfConfig":"22"},{"size":1466,"mtime":1697634898478,"results":"37","hashOfConfig":"22"},{"size":1381,"mtime":1697635263298,"results":"38","hashOfConfig":"22"},{"size":1542,"mtime":1697631490833,"results":"39","hashOfConfig":"22"},{"size":1055,"mtime":1697631818478,"results":"40","hashOfConfig":"22"},{"size":1390,"mtime":1697631490323,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"mwqiud",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js",[],[],["105"],"/home/labber/Dev/chemical-plant-dashboard/client/src/App.js",["106","107","108"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx",["109","110","111","112","113"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js",["114"],[],"import { timestampToReadableDate } from \"../Time/time\";\r\n\r\nexport function GetGraphSettings(type, plotData) {\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n       \r\n          label: (item) => {\r\n         \r\n            if (type === \"Temperature\") {\r\n              return `${item.formattedValue} °C`;\r\n            } else if (type === \"Pressure\") {\r\n              return `${item.formattedValue} kPa`;\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return `${item.formattedValue} L`;\r\n            } else if (\r\n              type === \"All\"\r\n            ) {\r\n              return`${item.formattedValue}`;\r\n            }\r\n          },\r\n        },\r\n    },\r\n  },\r\n   \r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false,\r\n            title: {\r\n              display: true,\r\n              text: `\r\n            Time\r\n              `,\r\n              font: {\r\n                size: 14,\r\n                weight: 'bold',\r\n              },\r\n            },\r\n          },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: `\r\n          ${type === \"Temperature\" ? \"Temperature (°C)\" : ''}\r\n          ${type === \"Pressure\" ? \"Pressure (kPa)\" : ''}\r\n          ${type.includes(\"Level\") ? \"Level (L)\" : ''}\r\n          ${type === \"All\" ? \"All\" : ''}\r\n          `,\r\n          font: {\r\n            size: 14,\r\n            weight: 'bold',\r\n          },\r\n        },\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" ) {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n\r\n  if (type === \"Level\") {\r\n    // For \"Level\" type, create two datasets for Level1 and Level2\r\n    datasets = [\r\n      {\r\n        label: \"Level1\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Level2\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n      },\r\n    ];\r\n  }else if (type === \"All\") {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n        {\r\n          label: \"Level1\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level1_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n        },\r\n        {\r\n          label: \"Level2\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level2_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Temperature\",\r\n          data: plotData.map((data2) => {\r\n            return data2.temperature;\r\n          }),\r\n          backgroundColor: \"rgba(20, 12, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Pressure\",\r\n          data: plotData.map((data2) => {\r\n            return data2.pressure;\r\n          }),\r\n          backgroundColor: \"rgba(100, 22, 235, 0.5\",\r\n        },\r\n      ];\r\n  }\r\n  \r\n  \r\n  else {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}","/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js",["115"],[],"import { timestampToReadableDate } from \"../Time/time\";\r\n\r\nexport function GetGraphSettingsLine(type, plotData) {\r\n  console.log(plotData);\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Line Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"||\r\n            type === \"LevelCombined\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\" ||\r\n              type === \"LevelCombined\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n  if(type === \"Level\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level1_chemical;\r\n          }),\r\n        \r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level2_chemical;\r\n          }),\r\n        \r\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\",      },\r\n    ];\r\n  } else if(type === \"LevelCombined\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n            return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n          }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      \r\n    ];\r\n  }\r\n  else if (type === \"All\") {\r\n    datasets = [\r\n      {\r\n        label: \"Temperature\",\r\n        data: plotData.map((data2) => {\r\n          return data2.temperature\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Pressure\",\r\n        data: plotData.map((data2) => {\r\n          return data2.pressure\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(155, 20, 32, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical1 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(5, 120, 99, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical2 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 0, 200, 0.5\",\r\n      },\r\n      {\r\n        label: \"Combined Level\",\r\n        data: plotData.map((data2) => {\r\n          return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 29, 2, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n  else {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  \r\n  }\r\n   \r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Time/time.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/dummy.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/Data/types.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/style/style.js",["116","117"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/index.jsx",["118","119","120","121","122","123","124","125","126","127","128"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/FetchAndReset/index.jsx",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/Data/index.jsx",["129"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/Graph/index.jsx",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/TimeWindow/index.jsx",["130"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Content/TimeAvg/index.jsx",["131"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Line.jsx",["132","133","134","135"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Graph.jsx",["136","137","138","139"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Graph/Bar.jsx",[],[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":1,"column":8,"nodeType":"144","messageId":"145","endLine":1,"endColumn":12},{"ruleId":"142","severity":1,"message":"146","line":4,"column":46,"nodeType":"144","messageId":"145","endLine":4,"endColumn":54},{"ruleId":"142","severity":1,"message":"147","line":63,"column":9,"nodeType":"144","messageId":"145","endLine":63,"endColumn":13},{"ruleId":"142","severity":1,"message":"148","line":1,"column":28,"nodeType":"144","messageId":"145","endLine":1,"endColumn":34},{"ruleId":"142","severity":1,"message":"149","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":16},{"ruleId":"142","severity":1,"message":"150","line":4,"column":24,"nodeType":"144","messageId":"145","endLine":4,"endColumn":29},{"ruleId":"142","severity":1,"message":"151","line":14,"column":10,"nodeType":"144","messageId":"145","endLine":14,"endColumn":23},{"ruleId":"152","severity":1,"message":"153","line":65,"column":6,"nodeType":"154","endLine":65,"endColumn":38,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":156,"column":36,"nodeType":"158","messageId":"159","endLine":156,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":154,"column":36,"nodeType":"158","messageId":"159","endLine":154,"endColumn":38},{"ruleId":"142","severity":1,"message":"160","line":1,"column":18,"nodeType":"144","messageId":"145","endLine":1,"endColumn":22},{"ruleId":"142","severity":1,"message":"150","line":1,"column":24,"nodeType":"144","messageId":"145","endLine":1,"endColumn":29},{"ruleId":"142","severity":1,"message":"149","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":16},{"ruleId":"142","severity":1,"message":"150","line":1,"column":24,"nodeType":"144","messageId":"145","endLine":1,"endColumn":29},{"ruleId":"142","severity":1,"message":"161","line":3,"column":3,"nodeType":"144","messageId":"145","endLine":3,"endColumn":12},{"ruleId":"142","severity":1,"message":"162","line":4,"column":3,"nodeType":"144","messageId":"145","endLine":4,"endColumn":14},{"ruleId":"142","severity":1,"message":"163","line":5,"column":3,"nodeType":"144","messageId":"145","endLine":5,"endColumn":14},{"ruleId":"142","severity":1,"message":"164","line":6,"column":3,"nodeType":"144","messageId":"145","endLine":6,"endColumn":14},{"ruleId":"142","severity":1,"message":"165","line":7,"column":3,"nodeType":"144","messageId":"145","endLine":7,"endColumn":17},{"ruleId":"142","severity":1,"message":"166","line":8,"column":3,"nodeType":"144","messageId":"145","endLine":8,"endColumn":14},{"ruleId":"142","severity":1,"message":"167","line":9,"column":3,"nodeType":"144","messageId":"145","endLine":9,"endColumn":20},{"ruleId":"142","severity":1,"message":"168","line":10,"column":3,"nodeType":"144","messageId":"145","endLine":10,"endColumn":13},{"ruleId":"142","severity":1,"message":"169","line":11,"column":3,"nodeType":"144","messageId":"145","endLine":11,"endColumn":13},{"ruleId":"142","severity":1,"message":"170","line":3,"column":3,"nodeType":"144","messageId":"145","endLine":3,"endColumn":17},{"ruleId":"142","severity":1,"message":"168","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":20},{"ruleId":"142","severity":1,"message":"170","line":3,"column":3,"nodeType":"144","messageId":"145","endLine":3,"endColumn":17},{"ruleId":"142","severity":1,"message":"171","line":5,"column":3,"nodeType":"144","messageId":"145","endLine":5,"endColumn":13},{"ruleId":"142","severity":1,"message":"172","line":12,"column":10,"nodeType":"144","messageId":"145","endLine":12,"endColumn":23},{"ruleId":"142","severity":1,"message":"173","line":14,"column":10,"nodeType":"144","messageId":"145","endLine":14,"endColumn":13},{"ruleId":"142","severity":1,"message":"148","line":15,"column":28,"nodeType":"144","messageId":"145","endLine":15,"endColumn":34},{"ruleId":"142","severity":1,"message":"174","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":26},{"ruleId":"142","severity":1,"message":"175","line":1,"column":28,"nodeType":"144","messageId":"145","endLine":1,"endColumn":36},{"ruleId":"142","severity":1,"message":"176","line":6,"column":9,"nodeType":"144","messageId":"145","endLine":6,"endColumn":16},{"ruleId":"142","severity":1,"message":"177","line":7,"column":9,"nodeType":"144","messageId":"145","endLine":7,"endColumn":18},"no-new-object",["178"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useTheme' is defined but never used.","'Logo' is assigned a value but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'buttonPressed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fullData'. Either include it or remove the dependency array.","ArrayExpression",["179"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Grid' is defined but never used.","'AllButton' is defined but never used.","'FetchButton' is defined but never used.","'GraphButton' is defined but never used.","'LevelButton' is defined but never used.","'PressureButton' is defined but never used.","'ResetButton' is defined but never used.","'TemperatureButton' is defined but never used.","'TimeButton' is defined but never used.","'TypeButton' is defined but never used.","'SelectedButton' is defined but never used.","'BarElement' is defined but never used.","'dummyDatasets' is defined but never used.","'Bar' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'barType' is assigned a value but never used.","'timeFrame' is assigned a value but never used.","no-object-constructor",{"desc":"180","fix":"181"},"Update the dependencies array to be: [fullData, graph.timeEnd, graph.timeStart]",{"range":"182","text":"183"},[1956,1988],"[fullData, graph.timeEnd, graph.timeStart]"]