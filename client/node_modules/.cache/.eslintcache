[{"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js":"1","/home/labber/Dev/chemical-plant-dashboard/client/src/App.js":"2","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js":"3","/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx":"4","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx":"5","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx":"6","/home/labber/Dev/chemical-plant-dashboard/client/src/services/dummy.js":"7","/home/labber/Dev/chemical-plant-dashboard/client/src/services/time.js":"8","/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js":"9","/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js":"10","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js":"11"},{"size":535,"mtime":1697532346620,"results":"12","hashOfConfig":"13"},{"size":554,"mtime":1697532346620,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1697532346620,"results":"15","hashOfConfig":"13"},{"size":3049,"mtime":1697555071609,"results":"16","hashOfConfig":"13"},{"size":1328,"mtime":1697554591245,"results":"17","hashOfConfig":"13"},{"size":1357,"mtime":1697554142661,"results":"18","hashOfConfig":"13"},{"size":3342,"mtime":1697532346620,"results":"19","hashOfConfig":"13"},{"size":458,"mtime":1697532346620,"results":"20","hashOfConfig":"13"},{"size":4152,"mtime":1697553294061,"results":"21","hashOfConfig":"13"},{"size":4714,"mtime":1697532346620,"results":"22","hashOfConfig":"13"},{"size":233,"mtime":1697554581814,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"mwqiud",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"27"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js",[],[],["65"],"/home/labber/Dev/chemical-plant-dashboard/client/src/App.js",["66"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Graph from \"./components/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to Chemical Dashboard</h1>\n        <Graph />\n{/*         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n */}        {/* <p>Lol</p>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        ></a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],[],"import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport LineGraph from \"./Line\";\r\nimport { BarGraphType, GraphTypes, LineGraphTypes } from \"../services/dummy\";\r\nimport { BarGraph } from \"./Bar\";\r\nimport { GetData } from \"../services/APICall\";\r\n\r\nexport default function Graph() {\r\n  const [graphType, setGraphType] = useState(\"\");\r\n  const [barType, setBarType] = useState(\"\");\r\n  const [lineType, setLineType] = useState(\"\");\r\n  const [fullData, setFullData] = useState([]);\r\n  const [updateData, setUpdateData] = useState(false);\r\n  const [buttonPressed, setButtonPressed] = useState(false);\r\n\r\n  const handleButtonClick = () => {\r\n    setButtonPressed(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      GetData().then((data) => {\r\n        const sorted = data.data.sort((a, b) => {\r\n          const timestampA = new Date(a.timestamp);\r\n          const timestampB = new Date(b.timestamp);\r\n          return timestampA - timestampB;\r\n        });\r\n        setFullData(sorted);\r\n        setButtonPressed(false);\r\n      });\r\n    };\r\n    fetchData();\r\n    const dataFetchInterval = setInterval(() => {\r\n      fetchData();\r\n    }, 30000); // 30 seconds\r\n    return () => {\r\n      clearInterval(dataFetchInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        name=\"GraphType\"\r\n        onChange={(e) => {\r\n          setGraphType(e.target.value);\r\n        }}\r\n      >\r\n        <option selected=\"selected\"></option>\r\n        {GraphTypes.map(({ value, label }, index) => (\r\n          <option key={index} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br />\r\n      <button onClick={handleButtonClick}>Fetch Data Now</button>\r\n      <br />\r\n      {graphType === \"Line\" && (\r\n        <>\r\n          <select\r\n            name=\"LineType\"\r\n            onChange={(e) => {\r\n              setLineType(e.target.value);\r\n            }}\r\n          >\r\n            <option selected=\"selected\"></option>\r\n            {LineGraphTypes.map(({ value, label }, index) => (\r\n              <option key={index} value={value}>\r\n                {label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {lineType && <LineGraph type={lineType} data={fullData} />}\r\n        </>\r\n      )}\r\n\r\n      {graphType === \"Bar\" && (\r\n        <>\r\n          <select\r\n            name=\"BarType\"\r\n            onChange={(e) => {\r\n              setBarType(e.target.value);\r\n            }}\r\n          >\r\n            <option selected=\"selected\"></option>\r\n            {BarGraphType.map(({ value, label }, index) => (\r\n              <option key={index} value={value}>\r\n                {label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {barType && <BarGraph type={barType} data={fullData} />}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx",["82","83","84"],[],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\nimport { timestampToReadableDate } from \"../services/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettings(barType, props.data);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [barType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Bar redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx",["85","86","87","88","89"],[],"import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\n\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function LineGraph(props) {\r\n  const lineType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettingsLine(lineType, props.data);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [lineType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Line redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/home/labber/Dev/chemical-plant-dashboard/client/src/services/dummy.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/time.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js",["90"],[],"import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettings(type, plotData) {\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n\r\n  if (type === \"Level\") {\r\n    // For \"Level\" type, create two datasets for Level1 and Level2\r\n    datasets = [\r\n      {\r\n        label: \"Level1\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Level2\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n      },\r\n    ];\r\n  }else if (type === \"All\") {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n        {\r\n          label: \"Level1\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level1_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n        },\r\n        {\r\n          label: \"Level2\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level2_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Temperature\",\r\n          data: plotData.map((data2) => {\r\n            return data2.temperature;\r\n          }),\r\n          backgroundColor: \"rgba(20, 12, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Pressure\",\r\n          data: plotData.map((data2) => {\r\n            return data2.pressure;\r\n          }),\r\n          backgroundColor: \"rgba(100, 22, 235, 0.5\",\r\n        },\r\n      ];\r\n  }\r\n  \r\n  \r\n  else {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}",["91"],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js",["92"],[],"import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettingsLine(type, plotData) {\r\n  console.log(plotData);\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Line Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"||\r\n            type === \"LevelCombined\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\" ||\r\n              type === \"LevelCombined\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n  if(type === \"Level\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level1_chemical;\r\n          }),\r\n        \r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level2_chemical;\r\n          }),\r\n        \r\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\",      },\r\n    ];\r\n  } else if(type === \"LevelCombined\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n            return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n          }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      \r\n    ];\r\n  }\r\n  else if (type === \"All\") {\r\n    datasets = [\r\n      {\r\n        label: \"Temperature\",\r\n        data: plotData.map((data2) => {\r\n          return data2.temperature\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Pressure\",\r\n        data: plotData.map((data2) => {\r\n          return data2.pressure\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(155, 20, 32, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical1 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(5, 120, 99, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical2 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 0, 200, 0.5\",\r\n      },\r\n      {\r\n        label: \"Combined Level\",\r\n        data: plotData.map((data2) => {\r\n          return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 29, 2, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n  else {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  \r\n  }\r\n   \r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js",[],[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":12},{"ruleId":"95","severity":1,"message":"99","line":2,"column":12,"nodeType":"97","messageId":"98","endLine":2,"endColumn":19},{"ruleId":"95","severity":1,"message":"100","line":3,"column":3,"nodeType":"97","messageId":"98","endLine":3,"endColumn":16},{"ruleId":"95","severity":1,"message":"101","line":4,"column":3,"nodeType":"97","messageId":"98","endLine":4,"endColumn":14},{"ruleId":"95","severity":1,"message":"102","line":5,"column":3,"nodeType":"97","messageId":"98","endLine":5,"endColumn":13},{"ruleId":"95","severity":1,"message":"103","line":6,"column":3,"nodeType":"97","messageId":"98","endLine":6,"endColumn":8},{"ruleId":"95","severity":1,"message":"104","line":7,"column":3,"nodeType":"97","messageId":"98","endLine":7,"endColumn":10},{"ruleId":"95","severity":1,"message":"105","line":8,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":9},{"ruleId":"95","severity":1,"message":"106","line":9,"column":3,"nodeType":"97","messageId":"98","endLine":9,"endColumn":15},{"ruleId":"95","severity":1,"message":"107","line":10,"column":3,"nodeType":"97","messageId":"98","endLine":10,"endColumn":14},{"ruleId":"95","severity":1,"message":"108","line":12,"column":10,"nodeType":"97","messageId":"98","endLine":12,"endColumn":13},{"ruleId":"95","severity":1,"message":"109","line":12,"column":15,"nodeType":"97","messageId":"98","endLine":12,"endColumn":19},{"ruleId":"95","severity":1,"message":"110","line":13,"column":28,"nodeType":"97","messageId":"98","endLine":13,"endColumn":34},{"ruleId":"95","severity":1,"message":"111","line":24,"column":10,"nodeType":"97","messageId":"98","endLine":24,"endColumn":20},{"ruleId":"95","severity":1,"message":"112","line":24,"column":22,"nodeType":"97","messageId":"98","endLine":24,"endColumn":35},{"ruleId":"95","severity":1,"message":"113","line":25,"column":10,"nodeType":"97","messageId":"98","endLine":25,"endColumn":23},{"ruleId":"95","severity":1,"message":"114","line":12,"column":10,"nodeType":"97","messageId":"98","endLine":12,"endColumn":23},{"ruleId":"95","severity":1,"message":"115","line":13,"column":10,"nodeType":"97","messageId":"98","endLine":13,"endColumn":33},{"ruleId":"116","severity":1,"message":"117","line":38,"column":6,"nodeType":"118","endLine":38,"endColumn":15,"suggestions":"119"},{"ruleId":"95","severity":1,"message":"102","line":5,"column":3,"nodeType":"97","messageId":"98","endLine":5,"endColumn":13},{"ruleId":"95","severity":1,"message":"114","line":12,"column":10,"nodeType":"97","messageId":"98","endLine":12,"endColumn":23},{"ruleId":"95","severity":1,"message":"108","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":13},{"ruleId":"95","severity":1,"message":"110","line":15,"column":28,"nodeType":"97","messageId":"98","endLine":15,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":41,"column":6,"nodeType":"118","endLine":41,"endColumn":16,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":130,"column":36,"nodeType":"123","messageId":"124","endLine":130,"endColumn":38},{"ruleId":"93","replacedBy":"125"},{"ruleId":"121","severity":1,"message":"122","line":154,"column":36,"nodeType":"123","messageId":"124","endLine":154,"endColumn":38},"no-new-object",["126"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ChartJS' is defined but never used.","'CategoryScale' is defined but never used.","'LinearScale' is defined but never used.","'BarElement' is defined but never used.","'Title' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'PointElement' is defined but never used.","'LineElement' is defined but never used.","'Bar' is defined but never used.","'Line' is defined but never used.","'useRef' is defined but never used.","'updateData' is assigned a value but never used.","'setUpdateData' is assigned a value but never used.","'buttonPressed' is assigned a value but never used.","'dummyDatasets' is defined but never used.","'timestampToReadableDate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.","ArrayExpression",["127"],["128"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["126"],"no-object-constructor",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [barType, props.data]",{"range":"133","text":"134"},"Update the dependencies array to be: [lineType, props.data]",{"range":"135","text":"136"},[1019,1028],"[barType, props.data]",[1046,1056],"[lineType, props.data]"]