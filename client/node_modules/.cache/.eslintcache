[{"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js":"1","/home/labber/Dev/chemical-plant-dashboard/client/src/App.js":"2","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js":"3","/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx":"4","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx":"5","/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx":"6","/home/labber/Dev/chemical-plant-dashboard/client/src/services/dummy.js":"7","/home/labber/Dev/chemical-plant-dashboard/client/src/services/time.js":"8","/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js":"9","/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js":"10","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js":"11"},{"size":535,"mtime":1697532346620,"results":"12","hashOfConfig":"13"},{"size":554,"mtime":1697532346620,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1697532346620,"results":"15","hashOfConfig":"13"},{"size":3049,"mtime":1697555071609,"results":"16","hashOfConfig":"13"},{"size":1328,"mtime":1697554591245,"results":"17","hashOfConfig":"13"},{"size":1357,"mtime":1697554142661,"results":"18","hashOfConfig":"13"},{"size":3342,"mtime":1697532346620,"results":"19","hashOfConfig":"13"},{"size":458,"mtime":1697532346620,"results":"20","hashOfConfig":"13"},{"size":4152,"mtime":1697553294061,"results":"21","hashOfConfig":"13"},{"size":4714,"mtime":1697532346620,"results":"22","hashOfConfig":"13"},{"size":233,"mtime":1697554581814,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"mwqiud",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/labber/Dev/chemical-plant-dashboard/client/src/index.js",[],[],["62"],"/home/labber/Dev/chemical-plant-dashboard/client/src/App.js",["63"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Graph from \"./components/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to Chemical Dashboard</h1>\n        <Graph />\n{/*         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n */}        {/* <p>Lol</p>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        ></a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/labber/Dev/chemical-plant-dashboard/client/src/reportWebVitals.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx",["79","80","81"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Line.jsx",["82","83","84","85","86"],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/dummy.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/time.js",[],[],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js",["87"],[],"import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettings(type, plotData) {\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n\r\n  if (type === \"Level\") {\r\n    // For \"Level\" type, create two datasets for Level1 and Level2\r\n    datasets = [\r\n      {\r\n        label: \"Level1\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Level2\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n      },\r\n    ];\r\n  }else if (type === \"All\") {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n        {\r\n          label: \"Level1\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level1_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n        },\r\n        {\r\n          label: \"Level2\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level2_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Temperature\",\r\n          data: plotData.map((data2) => {\r\n            return data2.temperature;\r\n          }),\r\n          backgroundColor: \"rgba(20, 12, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Pressure\",\r\n          data: plotData.map((data2) => {\r\n            return data2.pressure;\r\n          }),\r\n          backgroundColor: \"rgba(100, 22, 235, 0.5\",\r\n        },\r\n      ];\r\n  }\r\n  \r\n  \r\n  else {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}",["88"],"/home/labber/Dev/chemical-plant-dashboard/client/src/services/LineGraph/lineType.js",["89"],[],"import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettingsLine(type, plotData) {\r\n  console.log(plotData);\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Line Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} °C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"||\r\n            type === \"LevelCombined\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false\r\n          },\r\n      y: {\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" °C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\" ||\r\n              type === \"LevelCombined\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n  if(type === \"Level\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level1_chemical;\r\n          }),\r\n        \r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n        \r\n            return data2.level2_chemical;\r\n          }),\r\n        \r\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\",      },\r\n    ];\r\n  } else if(type === \"LevelCombined\") {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n            return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n          }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      \r\n    ];\r\n  }\r\n  else if (type === \"All\") {\r\n    datasets = [\r\n      {\r\n        label: \"Temperature\",\r\n        data: plotData.map((data2) => {\r\n          return data2.temperature\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Pressure\",\r\n        data: plotData.map((data2) => {\r\n          return data2.pressure\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(155, 20, 32, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical1 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(5, 120, 99, 0.5\",\r\n      },\r\n      {\r\n        label: \"Chemical2 Level\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 0, 200, 0.5\",\r\n      },\r\n      {\r\n        label: \"Combined Level\",\r\n        data: plotData.map((data2) => {\r\n          return Number(data2.level1_chemical) + Number(data2.level2_chemical) ;\r\n        }\r\n        ),\r\n        backgroundColor: \"rgba(150, 29, 2, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n  else {\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  \r\n  }\r\n   \r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}","/home/labber/Dev/chemical-plant-dashboard/client/src/services/APICall/index.js",[],[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":8,"nodeType":"94","messageId":"95","endLine":1,"endColumn":12},{"ruleId":"92","severity":1,"message":"96","line":2,"column":12,"nodeType":"94","messageId":"95","endLine":2,"endColumn":19},{"ruleId":"92","severity":1,"message":"97","line":3,"column":3,"nodeType":"94","messageId":"95","endLine":3,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":4,"column":3,"nodeType":"94","messageId":"95","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"99","line":5,"column":3,"nodeType":"94","messageId":"95","endLine":5,"endColumn":13},{"ruleId":"92","severity":1,"message":"100","line":6,"column":3,"nodeType":"94","messageId":"95","endLine":6,"endColumn":8},{"ruleId":"92","severity":1,"message":"101","line":7,"column":3,"nodeType":"94","messageId":"95","endLine":7,"endColumn":10},{"ruleId":"92","severity":1,"message":"102","line":8,"column":3,"nodeType":"94","messageId":"95","endLine":8,"endColumn":9},{"ruleId":"92","severity":1,"message":"103","line":9,"column":3,"nodeType":"94","messageId":"95","endLine":9,"endColumn":15},{"ruleId":"92","severity":1,"message":"104","line":10,"column":3,"nodeType":"94","messageId":"95","endLine":10,"endColumn":14},{"ruleId":"92","severity":1,"message":"105","line":12,"column":10,"nodeType":"94","messageId":"95","endLine":12,"endColumn":13},{"ruleId":"92","severity":1,"message":"106","line":12,"column":15,"nodeType":"94","messageId":"95","endLine":12,"endColumn":19},{"ruleId":"92","severity":1,"message":"107","line":13,"column":28,"nodeType":"94","messageId":"95","endLine":13,"endColumn":34},{"ruleId":"92","severity":1,"message":"108","line":24,"column":10,"nodeType":"94","messageId":"95","endLine":24,"endColumn":20},{"ruleId":"92","severity":1,"message":"109","line":24,"column":22,"nodeType":"94","messageId":"95","endLine":24,"endColumn":35},{"ruleId":"92","severity":1,"message":"110","line":25,"column":10,"nodeType":"94","messageId":"95","endLine":25,"endColumn":23},{"ruleId":"92","severity":1,"message":"111","line":12,"column":10,"nodeType":"94","messageId":"95","endLine":12,"endColumn":23},{"ruleId":"92","severity":1,"message":"112","line":13,"column":10,"nodeType":"94","messageId":"95","endLine":13,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":38,"column":6,"nodeType":"115","endLine":38,"endColumn":15,"suggestions":"116"},{"ruleId":"92","severity":1,"message":"99","line":5,"column":3,"nodeType":"94","messageId":"95","endLine":5,"endColumn":13},{"ruleId":"92","severity":1,"message":"111","line":12,"column":10,"nodeType":"94","messageId":"95","endLine":12,"endColumn":23},{"ruleId":"92","severity":1,"message":"105","line":14,"column":10,"nodeType":"94","messageId":"95","endLine":14,"endColumn":13},{"ruleId":"92","severity":1,"message":"107","line":15,"column":28,"nodeType":"94","messageId":"95","endLine":15,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":41,"column":6,"nodeType":"115","endLine":41,"endColumn":16,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":130,"column":36,"nodeType":"120","messageId":"121","endLine":130,"endColumn":38},{"ruleId":"90","replacedBy":"122"},{"ruleId":"118","severity":1,"message":"119","line":154,"column":36,"nodeType":"120","messageId":"121","endLine":154,"endColumn":38},"no-new-object",["123"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ChartJS' is defined but never used.","'CategoryScale' is defined but never used.","'LinearScale' is defined but never used.","'BarElement' is defined but never used.","'Title' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'PointElement' is defined but never used.","'LineElement' is defined but never used.","'Bar' is defined but never used.","'Line' is defined but never used.","'useRef' is defined but never used.","'updateData' is assigned a value but never used.","'setUpdateData' is assigned a value but never used.","'buttonPressed' is assigned a value but never used.","'dummyDatasets' is defined but never used.","'timestampToReadableDate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.","ArrayExpression",["124"],["125"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["123"],"no-object-constructor",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [barType, props.data]",{"range":"130","text":"131"},"Update the dependencies array to be: [lineType, props.data]",{"range":"132","text":"133"},[1019,1028],"[barType, props.data]",[1046,1056],"[lineType, props.data]"]