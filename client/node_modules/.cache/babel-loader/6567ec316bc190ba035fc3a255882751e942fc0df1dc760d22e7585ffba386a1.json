{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from \"chart.js\";\nimport { dummyDatasets } from \"../services/dummy\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function LineGraph(props) {\n  _s();\n  const lineType = props.type;\n  const [options, setOptions] = useState({});\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const GraphSettings = GetGraphSettingsLine(lineType, dummyDatasets);\n    if (GraphSettings) {\n      setOptions(GraphSettings.options);\n      setLabels(GraphSettings.labels);\n      setChartData({});\n      setChartData(GraphSettings.chartData);\n    }\n    setChartData(GraphSettings.chartData);\n  }, [lineType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options && labels.length > 0 && chartData && Object.keys(chartData).length > 0 && chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      redraw: true,\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n_s(LineGraph, \"XODYSHHvai3qwzys3ApSb9jAig0=\");\n_c = LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","dummyDatasets","Bar","Line","React","useEffect","useRef","useState","GetGraphSettingsLine","jsxDEV","_jsxDEV","Fragment","_Fragment","register","LineGraph","props","_s","lineType","type","options","setOptions","labels","setLabels","chartData","setChartData","GraphSettings","children","length","Object","keys","datasets","redraw","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx"],"sourcesContent":["import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\n\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function LineGraph(props) {\r\n  const lineType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettingsLine(lineType, dummyDatasets);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData({});\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [lineType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Line redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SACEA,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,YAAY,EACZC,WAAW,QACN,UAAU;AACjB,SAASC,aAAa,QAAQ,mBAAmB;AAEjD,SAASC,GAAG,EAAEC,IAAI,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,oBAAoB,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACtEpB,OAAO,CAACqB,QAAQ,CACdpB,aAAa,EACbC,WAAW,EACXK,YAAY,EACZC,WAAW,EACXJ,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,eAAe,SAASgB,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAI;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CF,SAAS,CAAC,MAAM;IACd,MAAMoB,aAAa,GAAGjB,oBAAoB,CAACS,QAAQ,EAAEhB,aAAa,CAAC;IACnE,IAAIwB,aAAa,EAAE;MACjBL,UAAU,CAACK,aAAa,CAACN,OAAO,CAAC;MACjCG,SAAS,CAACG,aAAa,CAACJ,MAAM,CAAC;MAC/BG,YAAY,CAAC,CAAC,CAAC,CAAC;MAChBA,YAAY,CAACC,aAAa,CAACF,SAAS,CAAC;IACvC;IACAC,YAAY,CAACC,aAAa,CAACF,SAAS,CAAC;EACvC,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACGP,OAAO,IACRE,MAAM,CAACM,MAAM,GAAG,CAAC,IACjBJ,SAAS,IACTK,MAAM,CAACC,IAAI,CAACN,SAAS,CAAC,CAACI,MAAM,GAAG,CAAC,IACjCJ,SAAS,CAACO,QAAQ,CAACH,MAAM,GAAG,CAAC,gBAC3BjB,OAAA,CAACP,IAAI;MAAC4B,MAAM,EAAE,IAAK;MAACZ,OAAO,EAAEA,OAAQ;MAACa,IAAI,EAAET;IAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEzD1B,OAAA,CAAAE,SAAA,mBAAI;EACL,gBACD,CAAC;AAEP;AAACI,EAAA,CA9BuBF,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}