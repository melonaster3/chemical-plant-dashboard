{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { dummyDatasets } from \"../services/Data/dummy\";\nimport { getAverage, timestampToReadableDate } from \"../services/Time/time\";\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport function BarGraph(props) {\n  _s();\n  const barType = props.type;\n  const [options, setOptions] = useState({});\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const GraphSettings = GetGraphSettings(barType, props.data);\n    if (GraphSettings) {\n      setOptions(GraphSettings.options);\n      setLabels(GraphSettings.labels);\n      setChartData(GraphSettings.chartData);\n    }\n    setChartData(GraphSettings.chartData);\n    console.log(getAverage(props.data, \"Weekly\"));\n  }, [barType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options && labels.length > 0 && chartData && Object.keys(chartData).length > 0 && chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n      redraw: true,\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n_s(BarGraph, \"XODYSHHvai3qwzys3ApSb9jAig0=\");\n_c = BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","dummyDatasets","getAverage","timestampToReadableDate","GetGraphSettings","jsxDEV","_jsxDEV","Fragment","_Fragment","register","BarGraph","props","_s","barType","type","options","setOptions","labels","setLabels","chartData","setChartData","GraphSettings","data","console","log","children","length","Object","keys","datasets","redraw","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/Data/dummy\";\r\nimport { getAverage, timestampToReadableDate } from \"../services/Time/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettings(barType, props.data);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n    console.log(getAverage(props.data, \"Weekly\"));\r\n  }, [barType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Bar redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,UAAU,EAAEC,uBAAuB,QAAQ,uBAAuB;AAC3E,SAASC,gBAAgB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChEf,OAAO,CAACgB,QAAQ,CACdf,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,OAAO,SAASW,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGF,KAAK,CAACG,IAAI;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAM+B,aAAa,GAAGjB,gBAAgB,CAACS,OAAO,EAAEF,KAAK,CAACW,IAAI,CAAC;IAC3D,IAAID,aAAa,EAAE;MACjBL,UAAU,CAACK,aAAa,CAACN,OAAO,CAAC;MACjCG,SAAS,CAACG,aAAa,CAACJ,MAAM,CAAC;MAC/BG,YAAY,CAACC,aAAa,CAACF,SAAS,CAAC;IACvC;IACAC,YAAY,CAACC,aAAa,CAACF,SAAS,CAAC;IACrCI,OAAO,CAACC,GAAG,CAACtB,UAAU,CAACS,KAAK,CAACW,IAAI,EAAE,QAAQ,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAEb,oBACEP,OAAA,CAAAE,SAAA;IAAAiB,QAAA,EACGV,OAAO,IACRE,MAAM,CAACS,MAAM,GAAG,CAAC,IACjBP,SAAS,IACTQ,MAAM,CAACC,IAAI,CAACT,SAAS,CAAC,CAACO,MAAM,GAAG,CAAC,IACjCP,SAAS,CAACU,QAAQ,CAACH,MAAM,GAAG,CAAC,gBAC3BpB,OAAA,CAACN,GAAG;MAAC8B,MAAM,EAAE,IAAK;MAACf,OAAO,EAAEA,OAAQ;MAACO,IAAI,EAAEH;IAAU;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAExD5B,OAAA,CAAAE,SAAA,mBAAI;EACL,gBACD,CAAC;AAEP;AAACI,EAAA,CA9BeF,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}