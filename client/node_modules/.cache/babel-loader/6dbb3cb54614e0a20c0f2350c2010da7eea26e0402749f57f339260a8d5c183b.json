{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\"\n    },\n    title: {\n      display: true,\n      text: \"Chart.js Line Chart\"\n    }\n  }\n};\nconst labels = [\"day1\", \"day2\", \"day3\"];\nconst dummyDatasets = [{\n  timestamp: \"2023-10-13T00:00:00Z\",\n  temperature: 24.5,\n  pressure: 1019.8,\n  level1_chemical: 74.2,\n  level2_chemical: 59.8,\n  data: 1,\n  label: \"First Data\",\n  borderColor: \"rgb(255, 99, 132)\",\n  backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n}, {\n  timestamp: \"2023-10-13T00:05:00Z\",\n  temperature: 24.7,\n  pressure: 1020.0,\n  level1_chemical: 74.5,\n  level2_chemical: 60.0,\n  data: 2,\n  label: \"Second Data\",\n  borderColor: \"rgb(255, 99, 132)\",\n  backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n}, {\n  timestamp: \"2023-10-13T00:10:00Z\",\n  temperature: 24.8,\n  pressure: 1020.2,\n  level1_chemical: 74.7,\n  level2_chemical: 60.2,\n  data: 3,\n  label: \"Third Data\",\n  borderColor: \"rgb(255, 99, 132)\",\n  backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n}];\nconst data = {\n  labels,\n  datasets: [{\n    data: dummyDatasets.map(data2 => {\n      return data2.level1_chemical;\n    }),\n    label: \"Level 1 Chemical \",\n    borderColor: \"rgb(155, 50, 100)\",\n    backgroundColor: \"rgba(155, 50, 100, 0.5)\"\n  }, {\n    data: dummyDatasets.map(data2 => {\n      return data2.level2_chemical;\n    }),\n    label: \"Level 2 Chemical\",\n    borderColor: \"rgb(255, 99, 132)\",\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n  }]\n};\nexport default function LineGraph(props) {\n  _s();\n  const lineType = props.type;\n  const [options, setOptions] = useState({});\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const GraphSettings = GetGraphSettingsLine(lineType, dummyDatasets);\n    if (GraphSettings) {\n      setOptions(GraphSettings.options);\n      setLabels(GraphSettings.labels);\n      setChartData({});\n      setChartData(GraphSettings.chartData);\n    }\n    setChartData(GraphSettings.chartData);\n  }, [lineType]);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    options: options,\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n}\n_s(LineGraph, \"XODYSHHvai3qwzys3ApSb9jAig0=\");\n_c = LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","Bar","Line","React","useEffect","useRef","useState","GetGraphSettingsLine","jsxDEV","_jsxDEV","register","options","responsive","plugins","legend","position","title","display","text","labels","dummyDatasets","timestamp","temperature","pressure","level1_chemical","level2_chemical","data","label","borderColor","backgroundColor","datasets","map","data2","LineGraph","props","_s","lineType","type","setOptions","setLabels","chartData","setChartData","GraphSettings","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/src/components/Line.jsx"],"sourcesContent":["import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\n\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetGraphSettingsLine } from \"../services/LineGraph/lineType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: \"top\",\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: \"Chart.js Line Chart\",\r\n    },\r\n  },\r\n};\r\n\r\nconst labels = [\"day1\", \"day2\", \"day3\"];\r\n\r\nconst dummyDatasets = [\r\n  {\r\n    timestamp: \"2023-10-13T00:00:00Z\",\r\n    temperature: 24.5,\r\n    pressure: 1019.8,\r\n    level1_chemical: 74.2,\r\n    level2_chemical: 59.8,\r\n    data: 1,\r\n    label: \"First Data\",\r\n    borderColor: \"rgb(255, 99, 132)\",\r\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n  },\r\n  {\r\n    timestamp: \"2023-10-13T00:05:00Z\",\r\n    temperature: 24.7,\r\n    pressure: 1020.0,\r\n    level1_chemical: 74.5,\r\n    level2_chemical: 60.0,\r\n    data: 2,\r\n    label: \"Second Data\",\r\n\r\n    borderColor: \"rgb(255, 99, 132)\",\r\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n  },\r\n  {\r\n    timestamp: \"2023-10-13T00:10:00Z\",\r\n    temperature: 24.8,\r\n    pressure: 1020.2,\r\n    level1_chemical: 74.7,\r\n    level2_chemical: 60.2,\r\n    data: 3,\r\n    label: \"Third Data\",\r\n\r\n    borderColor: \"rgb(255, 99, 132)\",\r\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n  },\r\n];\r\n\r\nconst data = {\r\n  labels,\r\n  datasets: [\r\n    {\r\n      data: dummyDatasets.map((data2) => {\r\n        return data2.level1_chemical;\r\n      }),\r\n      label: \"Level 1 Chemical \",\r\n      borderColor: \"rgb(155, 50, 100)\",\r\n      backgroundColor: \"rgba(155, 50, 100, 0.5)\",\r\n    },\r\n    {\r\n      data: dummyDatasets.map((data2) => {\r\n        return data2.level2_chemical;\r\n      }),\r\n      label: \"Level 2 Chemical\",\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function LineGraph(props) {\r\n  const lineType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettingsLine(lineType, dummyDatasets);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData({});\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [lineType]);\r\n\r\n  return <Line options={options} data={data} />;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}