{"ast":null,"code":"import { timestampToReadableDate } from \"../time\";\nexport function GetGraphSettings(type, plotData) {\n  const commonOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart\"\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: item => {\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n            return `${item.yLabel} 째C`;\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n            return `${item.yLabel} kPa`;\n          } else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\" || type === \"LevelAVG\") {\n            return `${item.yLabel} L`;\n          } else if (type === \"All\") {\n            return `${item.yLabel}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        stacked: true\n      },\n      y: {\n        stacked: true,\n        ticks: {\n          callback: function (value, index, ticks) {\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n              return value + \" 째C\";\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n              return value + \" kPa\";\n            } else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\" || type === \"LevelAVG\") {\n              return value + \" L\";\n            } else if (type === \"All\") {\n              return `${item.yLabel}`;\n            }\n          }\n        }\n      }\n    }\n  };\n  const labels = plotData.map(data2 => {\n    return timestampToReadableDate(data2.timestamp);\n  });\n  let datasets = [];\n  if (type === \"Level\") {\n    // For \"Level\" type, create two datasets for Level1 and Level2\n    datasets = [{\n      label: \"Level1\",\n      data: plotData.map(data2 => {\n        return data2.level1_chemical;\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }, {\n      label: \"Level2\",\n      data: plotData.map(data2 => {\n        return data2.level2_chemical;\n      }),\n      backgroundColor: \"rgba(54, 162, 235, 0.5\"\n    }];\n  } else {\n    // For other types, create a single dataset\n    datasets = [{\n      label: \"Dataset 1\",\n      data: plotData.map(data2 => {\n        if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n          return data2.temperature;\n        } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n          return data2.pressure;\n        } else if (type === \"Level1\") {\n          return data2.level1_chemical;\n        } else if (type === \"Level2\") {\n          return data2.level2_chemical;\n        }\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }];\n  }\n  const chartData = {\n    labels,\n    datasets\n  };\n  return {\n    options: commonOptions,\n    labels,\n    chartData\n  };\n}\n_c = GetGraphSettings;\nvar _c;\n$RefreshReg$(_c, \"GetGraphSettings\");","map":{"version":3,"names":["timestampToReadableDate","GetGraphSettings","type","plotData","commonOptions","responsive","plugins","legend","position","title","display","text","tooltips","callbacks","label","item","yLabel","scales","x","stacked","y","ticks","callback","value","index","labels","map","data2","timestamp","datasets","data","level1_chemical","backgroundColor","level2_chemical","temperature","pressure","chartData","options","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/src/services/BarGraph/BarType.js"],"sourcesContent":["import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettings(type, plotData) {\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (item) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return `${item.yLabel} 째C`;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return `${item.yLabel} kPa`;\r\n          } else if (\r\n            type === \"Level1\" ||\r\n            type === \"Level2\" ||\r\n            type === \"Level\" ||\r\n            type === \"LevelAVG\"\r\n          ) {\r\n            return `${item.yLabel} L`;\r\n          } else if (\r\n            type === \"All\"\r\n          ) {\r\n            return `${item.yLabel}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n        x: {\r\n            stacked: true,\r\n          },\r\n          \r\n           \r\n      y: {\r\n        stacked: true,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n              return value + \" 째C\";\r\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return `${item.yLabel}`;\r\n              }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n\r\n  if (type === \"Level\") {\r\n    // For \"Level\" type, create two datasets for Level1 and Level2\r\n    datasets = [\r\n      {\r\n        label: \"Level1\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Level2\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n      },\r\n    ];\r\n  } else {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}