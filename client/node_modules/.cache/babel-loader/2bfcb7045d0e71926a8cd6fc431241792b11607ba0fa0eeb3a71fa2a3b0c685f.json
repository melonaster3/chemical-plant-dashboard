{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/src/components/Bar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { dummyDatasets } from \"../services/dummy\";\nimport { timestampToReadableDate } from \"../services/time\";\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport function BarGraph(props) {\n  _s();\n  const barType = props.type;\n  const [options, setOptions] = useState({});\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const GraphSettings = GetGraphSettings(barType, dummyDatasets);\n    console.log(GraphSettings);\n    setOptions(GraphSettings.options);\n    setLabels(GraphSettings.label);\n    setChartData({\n      labels,\n      datasets: [{\n        label: \"Dataset 1\",\n        data: dummyDatasets.map(data => {\n          return data.temperature;\n        }),\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n      }\n      /*   {\r\n          label: \"Dataset 2\",\r\n          data: dummyDatasets.map((data) => {\r\n            return data.pressure;\r\n          }),\r\n          backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n        }, */]\n    });\n  }, [barType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options && labels.length > 0 && chartData ? /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n_s(BarGraph, \"XODYSHHvai3qwzys3ApSb9jAig0=\");\n_c = BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","dummyDatasets","timestampToReadableDate","GetGraphSettings","jsxDEV","_jsxDEV","Fragment","_Fragment","register","BarGraph","props","_s","barType","type","options","setOptions","labels","setLabels","chartData","setChartData","GraphSettings","console","log","label","datasets","data","map","temperature","backgroundColor","children","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/src/components/Bar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\nimport { timestampToReadableDate } from \"../services/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettings(barType, dummyDatasets);\r\n    console.log(GraphSettings);\r\n    setOptions(GraphSettings.options);\r\n    setLabels(GraphSettings.label);\r\n    setChartData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Dataset 1\",\r\n          data: dummyDatasets.map((data) => {\r\n            return data.temperature;\r\n          }),\r\n          backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n        },\r\n        /*   {\r\n            label: \"Dataset 2\",\r\n            data: dummyDatasets.map((data) => {\r\n              return data.pressure;\r\n            }),\r\n            backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n          }, */\r\n      ],\r\n    });\r\n  }, [barType]);\r\n\r\n  return (\r\n    <>\r\n      {options && labels.length > 0 && chartData ? (\r\n        <Bar options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,uBAAuB,QAAQ,kBAAkB;AAC1D,SAASC,gBAAgB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChEd,OAAO,CAACe,QAAQ,CACdd,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,OAAO,SAASU,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGF,KAAK,CAACG,IAAI;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAM8B,aAAa,GAAGjB,gBAAgB,CAACS,OAAO,EAAEX,aAAa,CAAC;IAC9DoB,OAAO,CAACC,GAAG,CAACF,aAAa,CAAC;IAC1BL,UAAU,CAACK,aAAa,CAACN,OAAO,CAAC;IACjCG,SAAS,CAACG,aAAa,CAACG,KAAK,CAAC;IAC9BJ,YAAY,CAAC;MACXH,MAAM;MACNQ,QAAQ,EAAE,CACR;QACED,KAAK,EAAE,WAAW;QAClBE,IAAI,EAAExB,aAAa,CAACyB,GAAG,CAAED,IAAI,IAAK;UAChC,OAAOA,IAAI,CAACE,WAAW;QACzB,CAAC,CAAC;QACFC,eAAe,EAAE;MACnB;MACA;AACR;AACA;AACA;AACA;AACA;AACA,aANQ;IAQJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAChB,OAAO,CAAC,CAAC;EAEb,oBACEP,OAAA,CAAAE,SAAA;IAAAsB,QAAA,EACGf,OAAO,IAAIE,MAAM,CAACc,MAAM,GAAG,CAAC,IAAIZ,SAAS,gBACxCb,OAAA,CAACL,GAAG;MAACc,OAAO,EAAEA,OAAQ;MAACW,IAAI,EAAEP;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE1C7B,OAAA,CAAAE,SAAA,mBAAI;EACL,gBACD,CAAC;AAEP;AAACI,EAAA,CAzCeF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}