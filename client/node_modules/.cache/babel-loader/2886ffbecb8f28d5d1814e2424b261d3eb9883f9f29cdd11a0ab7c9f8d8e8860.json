{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx\",\n  _s = $RefreshSig$();\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport LineGraph from \"./Line\";\nimport { BarGraphType, GraphTypes, LineGraphTypes, timeFrameSelection } from \"../services/Data/types\";\nimport { BarGraph } from \"./Bar\";\nimport { GetData } from \"../services/APICall\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Graph() {\n  _s();\n  const [graphType, setGraphType] = useState(\"\");\n  const [barType, setBarType] = useState(\"\");\n  const [lineType, setLineType] = useState(\"\");\n  const [fullData, setFullData] = useState([]);\n  const [timeFrame, setTimeFrame] = useState(\"Weekly\");\n  const [buttonPressed, setButtonPressed] = useState(false);\n  const handleButtonClick = () => {\n    setButtonPressed(true);\n  };\n  useEffect(() => {\n    const fetchData = () => {\n      GetData().then(data => {\n        const sorted = data.data.sort((a, b) => {\n          const timestampA = new Date(a.timestamp);\n          const timestampB = new Date(b.timestamp);\n          return timestampA - timestampB;\n        });\n        setFullData(sorted);\n        setButtonPressed(false);\n      });\n    };\n    fetchData();\n    const dataFetchInterval = setInterval(() => {\n      fetchData();\n    }, 30000); // 30 seconds\n    return () => {\n      clearInterval(dataFetchInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"GraphType\",\n      onChange: e => {\n        setGraphType(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        selected: \"selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), GraphTypes.map(({\n        value,\n        label\n      }, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: value,\n        children: label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"Fetch Data Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), graphType === \"Line\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"LineType\",\n        onChange: e => {\n          setLineType(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: \"selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), LineGraphTypes.map(({\n          value,\n          label\n        }, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value,\n          children: label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), lineType && /*#__PURE__*/_jsxDEV(LineGraph, {\n        type: lineType,\n        data: fullData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"TimeFrame\",\n      onChange: e => {\n        setTimeFrame(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        selected: \"selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), timeFrameSelection.map(({\n        value,\n        label\n      }, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: value,\n        children: label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), graphType === \"Bar\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"BarType\",\n        onChange: e => {\n          setBarType(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: \"selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), BarGraphType.map(({\n          value,\n          label\n        }, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value,\n          children: label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), barType && /*#__PURE__*/_jsxDEV(BarGraph, {\n        type: barType,\n        data: fullData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n_s(Graph, \"o0913G2RCZKjZq///TSiKNp8Dqs=\");\n_c = Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","Bar","Line","React","useEffect","useRef","useState","LineGraph","BarGraphType","GraphTypes","LineGraphTypes","timeFrameSelection","BarGraph","GetData","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","_s","graphType","setGraphType","barType","setBarType","lineType","setLineType","fullData","setFullData","timeFrame","setTimeFrame","buttonPressed","setButtonPressed","handleButtonClick","fetchData","then","data","sorted","sort","a","b","timestampA","Date","timestamp","timestampB","dataFetchInterval","setInterval","clearInterval","children","name","onChange","e","target","value","selected","fileName","_jsxFileName","lineNumber","columnNumber","map","label","index","onClick","type","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/client/src/components/index.jsx"],"sourcesContent":["import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport LineGraph from \"./Line\";\r\nimport {\r\n  BarGraphType,\r\n  GraphTypes,\r\n  LineGraphTypes,\r\n  timeFrameSelection,\r\n} from \"../services/Data/types\";\r\nimport { BarGraph } from \"./Bar\";\r\nimport { GetData } from \"../services/APICall\";\r\n\r\nexport default function Graph() {\r\n  const [graphType, setGraphType] = useState(\"\");\r\n  const [barType, setBarType] = useState(\"\");\r\n  const [lineType, setLineType] = useState(\"\");\r\n  const [fullData, setFullData] = useState([]);\r\n  const [timeFrame, setTimeFrame] = useState(\"Weekly\");\r\n  const [buttonPressed, setButtonPressed] = useState(false);\r\n\r\n  const handleButtonClick = () => {\r\n    setButtonPressed(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      GetData().then((data) => {\r\n        const sorted = data.data.sort((a, b) => {\r\n          const timestampA = new Date(a.timestamp);\r\n          const timestampB = new Date(b.timestamp);\r\n          return timestampA - timestampB;\r\n        });\r\n        setFullData(sorted);\r\n        setButtonPressed(false);\r\n      });\r\n    };\r\n    fetchData();\r\n    const dataFetchInterval = setInterval(() => {\r\n      fetchData();\r\n    }, 30000); // 30 seconds\r\n    return () => {\r\n      clearInterval(dataFetchInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        name=\"GraphType\"\r\n        onChange={(e) => {\r\n          setGraphType(e.target.value);\r\n        }}\r\n      >\r\n        <option selected=\"selected\"></option>\r\n        {GraphTypes.map(({ value, label }, index) => (\r\n          <option key={index} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br />\r\n\r\n      <button onClick={handleButtonClick}>Fetch Data Now</button>\r\n      <br />\r\n      {graphType === \"Line\" && (\r\n        <>\r\n          <select\r\n            name=\"LineType\"\r\n            onChange={(e) => {\r\n              setLineType(e.target.value);\r\n            }}\r\n          >\r\n            <option selected=\"selected\"></option>\r\n            {LineGraphTypes.map(({ value, label }, index) => (\r\n              <option key={index} value={value}>\r\n                {label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {lineType && <LineGraph type={lineType} data={fullData} />}\r\n        </>\r\n      )}\r\n      <br />\r\n      <select\r\n        name=\"TimeFrame\"\r\n        onChange={(e) => {\r\n          setTimeFrame(e.target.value);\r\n        }}\r\n      >\r\n        <option selected=\"selected\"></option>\r\n        {timeFrameSelection.map(({ value, label }, index) => (\r\n          <option key={index} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br />\r\n      {graphType === \"Bar\" && (\r\n        <>\r\n          <select\r\n            name=\"BarType\"\r\n            onChange={(e) => {\r\n              setBarType(e.target.value);\r\n            }}\r\n          >\r\n            <option selected=\"selected\"></option>\r\n            {BarGraphType.map(({ value, label }, index) => (\r\n              <option key={index} value={value}>\r\n                {label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {barType && <BarGraph type={barType} data={fullData} />}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}