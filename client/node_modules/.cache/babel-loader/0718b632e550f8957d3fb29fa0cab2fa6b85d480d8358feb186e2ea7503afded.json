{"ast":null,"code":"var _jsxFileName = \"/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { dummyDatasets } from \"../services/dummy\";\nimport { timestampToReadableDate } from \"../services/time\";\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport function BarGraph(props) {\n  _s();\n  const barType = props.type;\n  const [dataProp, setDataProp] = useState([]);\n  const [options, setOptions] = useState({});\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    setDataProp(props.data);\n  }, [props.data]);\n  useEffect(() => {\n    const GraphSettings = GetGraphSettings(barType, dataProp);\n    if (GraphSettings) {\n      setOptions(GraphSettings.options);\n      setLabels(GraphSettings.labels);\n      setChartData({});\n      setChartData(GraphSettings.chartData);\n    }\n    setChartData(GraphSettings.chartData);\n  }, [barType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options && labels.length > 0 && chartData && Object.keys(chartData).length > 0 && chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n      redraw: true,\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n}\n_s(BarGraph, \"0dDemHy6c/onaqZfeuGbDHcriug=\");\n_c = BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","dummyDatasets","timestampToReadableDate","GetGraphSettings","jsxDEV","_jsxDEV","Fragment","_Fragment","register","BarGraph","props","_s","barType","type","dataProp","setDataProp","options","setOptions","labels","setLabels","chartData","setChartData","data","GraphSettings","children","length","Object","keys","datasets","redraw","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/client/src/components/Bar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { dummyDatasets } from \"../services/dummy\";\r\nimport { timestampToReadableDate } from \"../services/time\";\r\nimport { GetGraphSettings } from \"../services/BarGraph/BarType\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport function BarGraph(props) {\r\n  const barType = props.type;\r\n\r\n  const [dataProp, setDataProp] = useState([]);\r\n\r\n  const [options, setOptions] = useState({});\r\n  const [labels, setLabels] = useState([]);\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    setDataProp(props.data);\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    const GraphSettings = GetGraphSettings(barType, dataProp);\r\n    if (GraphSettings) {\r\n      setOptions(GraphSettings.options);\r\n      setLabels(GraphSettings.labels);\r\n      setChartData({});\r\n      setChartData(GraphSettings.chartData);\r\n    }\r\n    setChartData(GraphSettings.chartData);\r\n  }, [barType]);\r\n\r\n  return (\r\n    <>\r\n      {options &&\r\n      labels.length > 0 &&\r\n      chartData &&\r\n      Object.keys(chartData).length > 0 &&\r\n      chartData.datasets.length > 0 ? (\r\n        <Bar redraw={true} options={options} data={chartData} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,uBAAuB,QAAQ,kBAAkB;AAC1D,SAASC,gBAAgB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChEd,OAAO,CAACe,QAAQ,CACdd,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,OAAO,SAASU,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGF,KAAK,CAACG,IAAI;EAE1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdyB,WAAW,CAACL,KAAK,CAACY,IAAI,CAAC;EACzB,CAAC,EAAE,CAACZ,KAAK,CAACY,IAAI,CAAC,CAAC;EAEhBhC,SAAS,CAAC,MAAM;IACd,MAAMiC,aAAa,GAAGpB,gBAAgB,CAACS,OAAO,EAAEE,QAAQ,CAAC;IACzD,IAAIS,aAAa,EAAE;MACjBN,UAAU,CAACM,aAAa,CAACP,OAAO,CAAC;MACjCG,SAAS,CAACI,aAAa,CAACL,MAAM,CAAC;MAC/BG,YAAY,CAAC,CAAC,CAAC,CAAC;MAChBA,YAAY,CAACE,aAAa,CAACH,SAAS,CAAC;IACvC;IACAC,YAAY,CAACE,aAAa,CAACH,SAAS,CAAC;EACvC,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,oBACEP,OAAA,CAAAE,SAAA;IAAAiB,QAAA,EACGR,OAAO,IACRE,MAAM,CAACO,MAAM,GAAG,CAAC,IACjBL,SAAS,IACTM,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC,CAACK,MAAM,GAAG,CAAC,IACjCL,SAAS,CAACQ,QAAQ,CAACH,MAAM,GAAG,CAAC,gBAC3BpB,OAAA,CAACL,GAAG;MAAC6B,MAAM,EAAE,IAAK;MAACb,OAAO,EAAEA,OAAQ;MAACM,IAAI,EAAEF;IAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAExD5B,OAAA,CAAAE,SAAA,mBAAI;EACL,gBACD,CAAC;AAEP;AAACI,EAAA,CArCeF,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}