{"ast":null,"code":"import { timestampToReadableDate } from \"../Time/time\";\nexport function GetGraphSettings(type, plotData) {\n  const commonOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart\"\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: function (context) {\n          let label = new Intl.NumberFormat('en-US', {\n            style: 'percent',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n          }).format(context.formattedValue);\n          return label;\n        },\n        title: function (context) {\n          let title = context[0].label;\n          return title;\n        }\n      }\n    },\n    scales: {\n      x: {\n        stacked: type === \"Level\" ? true : false,\n        title: {\n          display: true,\n          text: `\n            Time\n              `,\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: `\n          ${type === \"Temperature\" ? \"Temperature (째C)\" : ''}\n          ${type === \"Pressure\" ? \"Pressure (kPa)\" : ''}\n          ${type.includes(\"Level\") ? \"Level (L)\" : ''}\n          ${type === \"All\" ? \"All\" : ''}\n          `,\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        },\n        stacked: type === \"Level\" ? true : false,\n        ticks: {\n          callback: function (value, index, ticks) {\n            if (type === \"Temperature\") {\n              return value + \" 째C\";\n            } else if (type === \"Pressure\") {\n              return value + \" kPa\";\n            } else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\" || type === \"LevelAVG\") {\n              return value + \" L\";\n            } else if (type === \"All\") {\n              return value;\n            }\n          }\n        }\n      }\n    }\n  };\n  const labels = plotData.map(data2 => {\n    return timestampToReadableDate(data2.timestamp);\n  });\n  let datasets = [];\n  if (type === \"Level\") {\n    // For \"Level\" type, create two datasets for Level1 and Level2\n    datasets = [{\n      label: \"Level1\",\n      data: plotData.map(data2 => {\n        return data2.level1_chemical;\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }, {\n      label: \"Level2\",\n      data: plotData.map(data2 => {\n        return data2.level2_chemical;\n      }),\n      backgroundColor: \"rgba(54, 162, 235, 0.5\"\n    }];\n  } else if (type === \"All\") {\n    // For other types, create a single dataset\n    datasets = [{\n      label: \"Level1\",\n      data: plotData.map(data2 => {\n        return data2.level1_chemical;\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }, {\n      label: \"Level2\",\n      data: plotData.map(data2 => {\n        return data2.level2_chemical;\n      }),\n      backgroundColor: \"rgba(54, 162, 235, 0.5\"\n    }, {\n      label: \"Temperature\",\n      data: plotData.map(data2 => {\n        return data2.temperature;\n      }),\n      backgroundColor: \"rgba(20, 12, 235, 0.5\"\n    }, {\n      label: \"Pressure\",\n      data: plotData.map(data2 => {\n        return data2.pressure;\n      }),\n      backgroundColor: \"rgba(100, 22, 235, 0.5\"\n    }];\n  } else {\n    // For other types, create a single dataset\n    datasets = [{\n      label: \"Dataset 1\",\n      data: plotData.map(data2 => {\n        if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n          return data2.temperature;\n        } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n          return data2.pressure;\n        } else if (type === \"Level1\") {\n          return data2.level1_chemical;\n        } else if (type === \"Level2\") {\n          return data2.level2_chemical;\n        }\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }];\n  }\n  const chartData = {\n    labels,\n    datasets\n  };\n  return {\n    options: commonOptions,\n    labels,\n    chartData\n  };\n}\n_c = GetGraphSettings;\nvar _c;\n$RefreshReg$(_c, \"GetGraphSettings\");","map":{"version":3,"names":["timestampToReadableDate","GetGraphSettings","type","plotData","commonOptions","responsive","plugins","legend","position","title","display","text","tooltips","callbacks","label","context","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formattedValue","scales","x","stacked","font","size","weight","y","includes","ticks","callback","value","index","labels","map","data2","timestamp","datasets","data","level1_chemical","backgroundColor","level2_chemical","temperature","pressure","chartData","options","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/client/src/services/BarGraph/BarType.js"],"sourcesContent":["import { timestampToReadableDate } from \"../Time/time\";\r\n\r\nexport function GetGraphSettings(type, plotData) {\r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n    },\r\n    \r\n    tooltips: {\r\n      callbacks: {\r\n        label: function(context) {\r\n\r\n          let label = new Intl.NumberFormat('en-US', {\r\n            style: 'percent',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n          }).format(context.formattedValue);\r\n          return label;\r\n        },\r\n        title: function(context) {\r\n          let title = context[0].label;\r\n          return title;\r\n        }\r\n      },\r\n    },\r\n    scales: {\r\n    x: {\r\n            stacked: type === \"Level\" ? true : false,\r\n            title: {\r\n              display: true,\r\n              text: `\r\n            Time\r\n              `,\r\n              font: {\r\n                size: 14,\r\n                weight: 'bold',\r\n              },\r\n            },\r\n          },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: `\r\n          ${type === \"Temperature\" ? \"Temperature (째C)\" : ''}\r\n          ${type === \"Pressure\" ? \"Pressure (kPa)\" : ''}\r\n          ${type.includes(\"Level\") ? \"Level (L)\" : ''}\r\n          ${type === \"All\" ? \"All\" : ''}\r\n          `,\r\n          font: {\r\n            size: 14,\r\n            weight: 'bold',\r\n          },\r\n        },\r\n        stacked: type === \"Level\" ? true : false,\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\") {\r\n              return value + \" 째C\";\r\n            } else if (type === \"Pressure\" ) {\r\n              return value + \" kPa\";\r\n            } else if (\r\n              type === \"Level1\" ||\r\n              type === \"Level2\" ||\r\n              type === \"Level\" ||\r\n              type === \"LevelAVG\"\r\n            ) {\r\n              return value + \" L\";\r\n            } else if (\r\n                type === \"All\"\r\n              ) {\r\n                return value               }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const labels = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  let datasets = [];\r\n\r\n  if (type === \"Level\") {\r\n    // For \"Level\" type, create two datasets for Level1 and Level2\r\n    datasets = [\r\n      {\r\n        label: \"Level1\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level1_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n      {\r\n        label: \"Level2\",\r\n        data: plotData.map((data2) => {\r\n          return data2.level2_chemical;\r\n        }),\r\n        backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n      },\r\n    ];\r\n  }else if (type === \"All\") {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n        {\r\n          label: \"Level1\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level1_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n        },\r\n        {\r\n          label: \"Level2\",\r\n          data: plotData.map((data2) => {\r\n            return data2.level2_chemical;\r\n          }),\r\n          backgroundColor: \"rgba(54, 162, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Temperature\",\r\n          data: plotData.map((data2) => {\r\n            return data2.temperature;\r\n          }),\r\n          backgroundColor: \"rgba(20, 12, 235, 0.5\",\r\n        },\r\n        {\r\n          label: \"Pressure\",\r\n          data: plotData.map((data2) => {\r\n            return data2.pressure;\r\n          }),\r\n          backgroundColor: \"rgba(100, 22, 235, 0.5\",\r\n        },\r\n      ];\r\n  }\r\n  \r\n  \r\n  else {\r\n    // For other types, create a single dataset\r\n    datasets = [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return { options: commonOptions, labels, chartData };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}