{"ast":null,"code":"import { timestampToReadableDate } from \"../time\";\nexport function GetGraphSettings(type, plotData) {\n  const commonOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart\"\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: item => {\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n            return `${item.yLabel} 째C`;\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n            return `${item.yLabel} kPa`;\n          } else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\") {\n            return `${item.yLabel} L`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        ticks: {\n          callback: function (value, index, ticks) {\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n              return value + \" 째C\";\n            } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n              return value + \" kPa\";\n            } else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\") {\n              return value + \" L\";\n            }\n          }\n        }\n      }\n    }\n  };\n  const label = plotData.map(data2 => {\n    return timestampToReadableDate(data2.timestamp);\n  });\n  const chartData = {\n    label,\n    datasets: [{\n      label: \"Dataset 1\",\n      data: plotData.map(data2 => {\n        if (type === \"Temperature\" || type === \"TemperatureAVG\") {\n          return data2.temperature;\n        } else if (type === \"Pressure\" || type === \"PressureAVG\") {\n          return data2.pressure;\n        } else if (type === \"Level1\") {\n          return data2.level1_chemical;\n        } else if (type === \"Level2\") {\n          return data2.level2_chemical;\n        } else if (type === \"Level\") {\n          return data2.level2_chemical + data2.level1_chemical;\n        }\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5\"\n    }]\n  };\n  return {\n    options: commonOptions,\n    label,\n    chartData\n  };\n}\n_c = GetGraphSettings;\n;\nvar _c;\n$RefreshReg$(_c, \"GetGraphSettings\");","map":{"version":3,"names":["timestampToReadableDate","GetGraphSettings","type","plotData","commonOptions","responsive","plugins","legend","position","title","display","text","tooltips","callbacks","label","item","yLabel","scales","y","ticks","callback","value","index","map","data2","timestamp","chartData","datasets","data","temperature","pressure","level1_chemical","level2_chemical","backgroundColor","options","_c","$RefreshReg$"],"sources":["/home/labber/Dev/chemical-plant-dashboard/src/services/BarGraph/BarType.js"],"sourcesContent":["import { timestampToReadableDate } from \"../time\";\r\n\r\nexport function GetGraphSettings (type, plotData) {\r\n    \r\n  const commonOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Bar Chart\",\r\n      },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        label:((item) => {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n                return  `${item.yLabel} 째C`\r\n              } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n                return `${item.yLabel} kPa`\r\n              } else if (type === \"Level1\" || type === \"Level2\" || type ===\"Level\") {\r\n                return `${item.yLabel} L`\r\n              } \r\n              \r\n      })}\r\n    },\r\n    scales: {\r\n      y: {\r\n        ticks: {\r\n          callback: function (value, index, ticks) {\r\n            if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n                return value + \" 째C\";              }\r\n                 else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n                    return value + \" kPa\";              } \r\n                    else if (type === \"Level1\" || type === \"Level2\" || type === \"Level\") {\r\n                        return value + \" L\";\r\n              } \r\n           \r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const label = plotData.map((data2) => {\r\n    return timestampToReadableDate(data2.timestamp);\r\n  });\r\n\r\n  const chartData = {\r\n    label,\r\n    datasets: [\r\n      {\r\n        label: \"Dataset 1\",\r\n        data: plotData.map((data2) => {\r\n          if (type === \"Temperature\" || type === \"TemperatureAVG\") {\r\n            return data2.temperature;\r\n          } else if (type === \"Pressure\" || type === \"PressureAVG\") {\r\n            return data2.pressure;\r\n          } else if (type === \"Level1\") {\r\n            return data2.level1_chemical;\r\n          } else if (type === \"Level2\") {\r\n            return data2.level2_chemical;\r\n          } else if (type === \"Level\") {\r\n            return data2.level2_chemical + data2.level1_chemical;\r\n          }\r\n        }),\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return { options: commonOptions, label, chartData };\r\n};"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,SAAS;AAEjD,OAAO,SAASC,gBAAgBA,CAAEC,IAAI,EAAEC,QAAQ,EAAE;EAEhD,MAAMC,aAAa,GAAG;IACpBC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;MACR;IACF,CAAC;IACDC,QAAQ,EAAE;MACRC,SAAS,EAAE;QACTC,KAAK,EAAGC,IAAI,IAAK;UACb,IAAIb,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;YACrD,OAAS,GAAEa,IAAI,CAACC,MAAO,KAAI;UAC7B,CAAC,MAAM,IAAId,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,aAAa,EAAE;YACxD,OAAQ,GAAEa,IAAI,CAACC,MAAO,MAAK;UAC7B,CAAC,MAAM,IAAId,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAI,OAAO,EAAE;YACpE,OAAQ,GAAEa,IAAI,CAACC,MAAO,IAAG;UAC3B;QAER;MAAE;IACJ,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,KAAK,EAAE;UACLC,QAAQ,EAAE,SAAAA,CAAUC,KAAK,EAAEC,KAAK,EAAEH,KAAK,EAAE;YACvC,IAAIjB,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;cACrD,OAAOmB,KAAK,GAAG,KAAK;YAAe,CAAC,MAC9B,IAAInB,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,aAAa,EAAE;cACrD,OAAOmB,KAAK,GAAG,MAAM;YAAe,CAAC,MAChC,IAAInB,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,OAAO,EAAE;cACjE,OAAOmB,KAAK,GAAG,IAAI;YAC7B;UAEJ;QACF;MACF;IACF;EACF,CAAC;EAED,MAAMP,KAAK,GAAGX,QAAQ,CAACoB,GAAG,CAAEC,KAAK,IAAK;IACpC,OAAOxB,uBAAuB,CAACwB,KAAK,CAACC,SAAS,CAAC;EACjD,CAAC,CAAC;EAEF,MAAMC,SAAS,GAAG;IAChBZ,KAAK;IACLa,QAAQ,EAAE,CACR;MACEb,KAAK,EAAE,WAAW;MAClBc,IAAI,EAAEzB,QAAQ,CAACoB,GAAG,CAAEC,KAAK,IAAK;QAC5B,IAAItB,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,gBAAgB,EAAE;UACvD,OAAOsB,KAAK,CAACK,WAAW;QAC1B,CAAC,MAAM,IAAI3B,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,aAAa,EAAE;UACxD,OAAOsB,KAAK,CAACM,QAAQ;QACvB,CAAC,MAAM,IAAI5B,IAAI,KAAK,QAAQ,EAAE;UAC5B,OAAOsB,KAAK,CAACO,eAAe;QAC9B,CAAC,MAAM,IAAI7B,IAAI,KAAK,QAAQ,EAAE;UAC5B,OAAOsB,KAAK,CAACQ,eAAe;QAC9B,CAAC,MAAM,IAAI9B,IAAI,KAAK,OAAO,EAAE;UAC3B,OAAOsB,KAAK,CAACQ,eAAe,GAAGR,KAAK,CAACO,eAAe;QACtD;MACF,CAAC,CAAC;MACFE,eAAe,EAAE;IACnB,CAAC;EAEL,CAAC;EAED,OAAO;IAAEC,OAAO,EAAE9B,aAAa;IAAEU,KAAK;IAAEY;EAAU,CAAC;AACrD;AAACS,EAAA,GAxEelC,gBAAgB;AAwE/B;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}